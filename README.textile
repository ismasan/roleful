h1. Role-ful

Roles for you and your objects.

h3. Usage

In your class, after including @Roleful@, declare your roles. It's up
to you to implement a @role@ instance method for your objects that determines
what kind of permissions they receive. If an object doesn't have a @role@ method,
or if the @role@ returns an invalid role, the @:null@ role will be used, which
just returns false for all permissions.

h4. Example:

<pre>
class User

  include Roleful
  
  role :admin do
    can :view_all_files
    can :view_all_pages
  end
  
  role :paid do
    can :view_all_pages
  end
  
  def initialize(name=nil)
    @role = name
  end
  
  def role
    @role
  end
  
end
</pre>

<pre>
nil_user = User.new
nil_user.paid? # => false
nil_user.admin? # => false
nil_user.can_view_all_pages? # => false
nil_user.can_view_all_files? # => false

paid_user = User.new(:paid)
paid_user.paid? # => true
paid_user.admin? # => false
paid_user.can_view_all_pages? # => true
paid_user.can_view_all_files? # => false

admin_user = User.new(:admin)
admin_user.paid? # => false
admin_user.admin? # => true
admin_user.can_view_all_pages? # => true
admin_user.can_view_all_files # => true
</pre>

h3. TODO

* Multiple roles per object
* Role contexts
* More examples on how to use this type of role scheme

(c) Copyright 2008 Pat Nakajima, released under the MIT license